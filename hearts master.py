{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"hearts master.py","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPIW0sW5E/DN/tf9Y98hQbw"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":126},"id":"pAMv57vSusYX","executionInfo":{"status":"error","timestamp":1618963394021,"user_tz":240,"elapsed":362,"user":{"displayName":"Isabel Riches","photoUrl":"","userId":"01909106147701978762"}},"outputId":"7b6f63e8-a54a-486a-963f-98349d170adc"},"source":["import random\n","\n","class card:\n","  suit = [\"clubs\", \"spades\", \"hearts\", \"diamonds\"]\n","  values = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n","\n","def init(user, suit, value):\n","  user = \n","  suit = user.suit\n","  value = user.value \n","\n","def repr(user):\n","  return user.values[user.value] + ' of ' + user.suit\n","\n","def equals(user, card):\n","  user.suit == card.suit\n","  user.value == card.value\n","  return user.suit and user.value\n"],"execution_count":1,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-0fdf44dd77f6>\"\u001b[0;36m, line \u001b[0;32m8\u001b[0m\n\u001b[0;31m    user =\u001b[0m\n\u001b[0m           ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":126},"id":"rtx3SU1yu130","executionInfo":{"status":"error","timestamp":1618963477487,"user_tz":240,"elapsed":262,"user":{"displayName":"Isabel Riches","photoUrl":"","userId":"01909106147701978762"}},"outputId":"0e37b263-ef75-4b16-9688-7421b0c4e39e"},"source":["import random\n","\n","class deck:\n"," suit = [\"clubs\", \"spades\", \"hearts\", \"diamonds\"]\n"," values = [x for x in range (2,15)]\n","\n","def init(user):\n"," user.deck = []\n"," user.cards = user.initiate_cards()\n","\n","def player_hand(user):\n"," return user.cards\n","\n","def initiate_cards(user):\n"," cards = []\n","for suit in user.suits:\n","\tfor value in user.values:\n","\t\tcards.append(card(suit, value))\n","\t\trandom.shuffle(cards)\n","\treturn cards\n","\n","def grab_card(user):\n"," if user.cards:\n","\t  return user.cards.pop()"],"execution_count":3,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-3-6c7f11ef8754>\"\u001b[0;36m, line \u001b[0;32m20\u001b[0m\n\u001b[0;31m    return cards\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m 'return' outside function\n"]}]},{"cell_type":"code","metadata":{"id":"mh_5EypevGsl"},"source":["class player:\n"," def init(user, name):\n","  user.name = name\n","  user.points = 0\n"," \n"," def card_sort(user):\n","  user.cards = sorted(user.cards, solution=lambda card: (card.suit, card.value))\n"," \n"," def holds(user, beginning_card):\n","  for card in user.cards:\n","   if card.equals(beginning_card):\n","    return True\n","   else: \n","    return False\n","  \n","  def play_card(user, primary_card, hearts_broken):\n","   potential_plays = []\n","  if player.holds(card('clubs', 2)):\n","   potential_plays.append(user.cards[0])\n","  elif primary_card == None:\n","    primary_card = card('None', -1)\n","  for card in user.cards:\n","   if card.suit == primary_card.suit:\n","    potential_plays.append(card)\n","   if not potential_plays:\n","    for card in user.cards:\n","      if card.suit == 'hearts':\n","        if primary_card.suit == 'None' or (primary_card.suit == 'clubs' and primary_card.value == 2):\n","          if hearts_broken:\n","           potential_plays.append(card)\n","      elif potential_plays.append(card):\n","        potential_plays.append(card)\n","        user.cards.remove(card)\n","        return card\n","\n","  def pull_card(user, card):\n","   user.cards.append(card)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"l3E3HRghvHzF","executionInfo":{"status":"ok","timestamp":1618963404995,"user_tz":240,"elapsed":590,"user":{"displayName":"Isabel Riches","photoUrl":"","userId":"01909106147701978762"}}},"source":["#from deck import deck\n","#from card import card\n","#from player import player\n","\n","class game:\n"," def init(user):\n","  user.deck = deck()\n","  user.players = self.define_players()\n","  user.first_player = 0\n","  user.primary_card = None\n","  user.hearts_broken = False\n","  user.previously_played = []\n"," \n"," def deal_cards(user):\n","  while user.deck.holds_cards():\n","    for user in user.players:\n","      user.supply_card(player, user.deck)\n","    for player in user.players:\n","      player.card_sort()\n"," \n"," def supply_card(user, player, deck):\n","  card = deck.grab_card\n","  player.pull_card()\n"," \n"," def starting_player(user):\n","  for i in range(len(user.players)):\n","    player = user.players[i]\n","  if player.holds(card('clubs', 2)):\n","    return i\n"," \n"," def round_n(user):\n","  for i in range(4):\n","    player = user.players[(user.first_player + 1) % 4]\n","  card_played = player.play_card(user.primary_card, user.hearts_broken)\n","  if i == 0:\n","    user.primary_card = card_played\n","  if card_played.suit == 'hearts':\n","    user.hearts_broken = True\n","  user.previously_played.append(card_played)\n","  max_value = 0\n","  top_card = None\n","  for card in user.previously_played:\n","    if card.suit == user.primary_card.suit and card.value > max_value:\n","      top_card = card\n","    max_value = card.value\n","    trick_taker = user.palyers[((user.girst_player + user.previously_played.index(top_card)) % 4)]\n","  for card in user.previously_played:\n","    if card.suit == 'hearts':\n","      trick_taker.points += 1\n","    if card.suit == 'spades' and card.value == 12:\n","      trick_taker.points += 13\n","    user.first_player = user.players.index(trick_taker)\n","    user.primary_card = None\n","    user.previously_player = []\n","    return user.points  "],"execution_count":2,"outputs":[]}]}